name: "ðŸš€ Releaser"

on:
  push:
    tags: "*"

env:
  PROJECT_FOLDER: "roof_classify"
  PYTHON_VERSION: 3.9

jobs:
  translation:
    runs-on: ubuntu-latest

    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Install system requirements
        run: |
          sudo apt update
          sudo apt install qt5-default qttools5-dev-tools

      - name: Update translations
        run: lupdate -noobsolete -verbose ${{ env.PROJECT_FOLDER }}/resources/i18n/plugin_translation.pro

      - name: Compile translations
        run: lrelease ${{ env.PROJECT_FOLDER }}/resources/i18n/*.ts

      - uses: actions/upload-artifact@v2
        with:
          name: translations-build
          path: ${{ env.PROJECT_FOLDER }}/**/*.qm
          if-no-files-found: error

  dependencies:
    runs-on: windows-latest

    steps:
      - name: Get source code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v2
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install project requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install --no-deps -U -r requirements/embedded.txt -t ${{ env.PROJECT_FOLDER }}/embedded_external_libs

      - name: Cleaning up
        shell: bash
        run: |
          rm -rf `find ${{ env.PROJECT_FOLDER }} -type d -name __pycache__`
          rm -rf `find ${{ env.PROJECT_FOLDER }} -type d -name *.dist-info`
          rm -rf `find ${{ env.PROJECT_FOLDER }}/embedded_external_libs -type d -name tests`

      - uses: actions/upload-artifact@v2
        with:
          name: dependencies-build
          path: ${{ env.PROJECT_FOLDER }}/embedded_external_libs/
          if-no-files-found: error

  packaging:
    runs-on: ubuntu-latest
    needs: [translation, dependencies]

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install project requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -U -r requirements/packaging.txt

      - name: Download translations
        uses: actions/download-artifact@v2
        with:
          name: translations-build

      - name: Download dependencies
        uses: actions/download-artifact@v2
        with:
          name: dependencies-build
          path: ${{ env.PROJECT_FOLDER }}/embedded_external_libs/

      - name: Amend gitignore to include embedded libs with qgis-plugin-ci
        run: |
          sed -i "s|^${{ env.PROJECT_FOLDER }}/embedded_external_libs/.*| |" .gitignore
          git add ${{ env.PROJECT_FOLDER }}/embedded_external_libs/

      - name: Get current changelog for ${GITHUB_REF/refs\/tags\//}
        run: qgis-plugin-ci changelog ${GITHUB_REF/refs\/tags\//} >> release.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: release.md

      - name: Deploy plugin
        run: >-
          qgis-plugin-ci
          release ${GITHUB_REF/refs\/tags\//}
          --github-token ${{ secrets.GITHUB_TOKEN }}
          --create-plugin-repo
          --allow-uncommitted-changes
          --osgeo-username ${{ secrets.OSGEO_USER }}
          --osgeo-password ${{ secrets.OSGEO_PASSWORD }}
